<?xml version="1.0" encoding="utf-8"?>
<widget id="caffcode.clientsidefileloader.ClientSideFileLoader" pluginWidget="true" needsEntityContext="true" offlineCapable="true"
        supportedPlatform="Web"
        xmlns="http://www.mendix.com/widget/1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.mendix.com/widget/1.0/ ../node_modules/mendix/custom_widget.xsd">
    <name>Client Side File Loader (1.0.0)</name>
    <description>Load files client side and let Mendix do things with it</description>
    <icon/>
    <properties>
        <propertyGroup caption="General">
            <propertyGroup caption="Scenario 1: CustomEvent">
                <property key="dataCustomEventKey" type="expression" required="false" defaultValue="">
                    <caption>Custom Event</caption>
                    <description>The key of the custom event. You can send a Custom Event to the document to be picked up by a Custom Event Listener. The upside is that you do not have to use string attributes to receive files. See "Upload String" for the format that is sent in the 'event.detail' of the Event</description>
                    <returnType type="String" />
                </property>
            </propertyGroup>
            <propertyGroup caption="Scenario 2: Attribute + Action">
                <property key="uploadFilesStringAttribute" type="attribute" required="false">
                    <caption>Upload String</caption>
                    <description>The widget will use this attribute to send files to Mendix. It does this by creating a JSON with fileObjects.

Format: [{ fileName: string, fileType: string, fileSize: number, fileObjectURL: string }]
Note: This attribute is checked by the widget, as long as it is filled, the dropzone will be disabled.
</description>
                    <attributeTypes>
                         <attributeType name="String" />
                    </attributeTypes>
                </property>
                <property key="onDropAction" type="action" required="false">
                    <caption>On Drop</caption>
                    <description>Action to be executed when you have dropped files (or selected). This is executed AFTER is has set the Upload String property.

It makes the most sense to execute a Nanoflow here.</description>
                </property>
            </propertyGroup>
            <propertyGroup caption="Widgets">
                <property key="areaDropZone" type="widgets" required="true">
                    <caption>Dropzone (required)</caption>
                    <description>The dropzone</description>
                </property>
                <property key="areaDropZoneDisabled" type="widgets" required="false">
                    <caption>Dropzone disabled (optional)</caption>
                    <description>The dropzone when it is disabled</description>
                </property>
            </propertyGroup>
        </propertyGroup>
        <propertyGroup caption="Error">
            <propertyGroup caption="Scenario 1: CustomEvent">
                <property key="errorCustomEventKey" type="expression" required="false" defaultValue="">
                    <caption>Custom Event</caption>
                    <description>The key of the custom event. You can send a Custom Event to the document to be picked up by a Custom Event Listener. The upside is that you do not have to use string attributes to receive files. See "Error String" for the format that is sent in the 'event.detail' of the Event</description>
                    <returnType type="String" />
                </property>
            </propertyGroup>
            <propertyGroup caption="Scenario 2: Attribute + Action">
                <property key="onErrorStringAttribute" type="attribute" required="false">
                    <caption>Error String</caption>
                    <description>Similar to the 'Upload String' (General), the widget will create a JSON string with error information. If you do not define this attribute, the widget will not produce any errors.

Format: [{ fileName: string, fileType: string, fileSize: number, errors: [{ code: string, message: string }] }]
</description>
                    <attributeTypes>
                         <attributeType name="String" />
                    </attributeTypes>
                </property>
                <property key="onDropError" type="action" required="false">
                    <caption>On Drop Error</caption>
                    <description>Action to be executed when the dropzone has errors. This is executed AFTER is has set the Error String property.
It makes the most sense to execute a Nanoflow here.</description>
                </property>
            </propertyGroup>
        </propertyGroup>
        <propertyGroup caption="Restrictions">
            <propertyGroup caption="Restrictions">
                <property key="maxSize" type="expression" required="false" defaultValue="">
                    <caption>Max size</caption>
                    <description>Max size in bytes</description>
                    <returnType type="Integer" />
                </property>
                <property key="minSize" type="expression" required="false" defaultValue="">
                    <caption>Min size</caption>
                    <description>Min size in bytes</description>
                    <returnType type="Integer" />
                </property>
                <property key="maxFiles" type="expression" required="false" defaultValue="">
                    <caption>Max files</caption>
                    <description>Max amount of files. In the module we set this to 'SpotsLeft'. Leave empty or set to '-1' for unlimited uploads</description>
                    <returnType type="Integer" />
                </property>
                <property key="acceptList" type="object" isList="true" required="false">
                    <caption>Accept</caption>
                    <description>This is a list of file types that can be accepted.

    More info: https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker#examples</description>
                    <properties>
                        <propertyGroup caption="Accept">
                            <property key="acceptGroupName" type="string" required="true" defaultValue="">
                                <caption>Group</caption>
                                <description>This is the group name, for example 'image/*' or 'text/html'</description>
                            </property>
                            <property key="acceptExtensions" type="string" required="false" defaultValue="">
                                <caption>Extensions</caption>
                                <description>(optional) This is a list of extensions, separated with a '|', for example '.png' or '.htm|.html'</description>
                            </property>
                        </propertyGroup>
                    </properties>
                </property>
            </propertyGroup>
        </propertyGroup>
        <propertyGroup caption="Misc">
            <propertyGroup caption="MIME">
                <property key="intenseMimeLookup" type="boolean" defaultValue="true">
                    <caption>Intense MIME lookup</caption>
                    <description>The browser/widget will try to determine the MIME type (e.g. 'image/png') of the dropped file. If it cannot determine the mime type automatically, the widget will try to read the file client side (using magic-bytes). This can slow down your widget significantly if the files are big. You can switch it off if necessary.</description>
                </property>
            </propertyGroup>
        </propertyGroup>
        <propertyGroup caption="Common">
            <systemProperty key="Visibility"/>
        </propertyGroup>
    </properties>
</widget>
